{"componentChunkName":"component---node-modules-gatsby-theme-ocular-src-react-templates-search-jsx","path":"/search","result":{"pageContext":{"data":[{"excerpt":"pydeck Welcome to  (deck.gl bindings for Python).  This is the documentation for   hosted on the pydeck.gl domain.  Attribution The  domain…","rawMarkdownBody":"# pydeck\n\nWelcome to `pydeck` (deck.gl bindings for Python). \n\nThis is the documentation for `pydeck`  hosted on the pydeck.gl domain. \n\n\n## Attribution\n\nThe `pydeck.gl` domain as well as the `pydeck` documentation repository are provided by [Unfolded, Inc](www.unfolded.ai).\n\nThe actual documentation is generated directly from Uber's [deck.gl](https://github.com/uber/deck.gl) repository.\n","slug":"docs","title":"pydeck"},{"excerpt":"Roadmap Early ideas: Error checking is still a pain point. deck.gl because of language differences lacks errors that would obviously be…","rawMarkdownBody":"# Roadmap\n\nEarly ideas:\n\n- Error checking is still a pain point. deck.gl because of language differences lacks errors that would obviously be thrown in python (more often than I'd like, I'll specify a layer attribute like color from a field that's not in my data set)\n- Categorical legends, time scrubbers, and \"explanation boxes\" like on the top right corner of this example: https://deck.gl/#/examples/core-layers/hexagon-layer\n- integration with something like kepler–specify your map configuration/viewport settings in kepler and then copy/paste them into pydeck, and/or use pydeck to configure kepler like arcpy configures arcgis\n\nAdd references to RFCs/github issues\n\n","slug":"docs/roadmap","title":"Roadmap"},{"excerpt":"Upgrade Guide Upgrading to v1.2 Expression syntax has changed...","rawMarkdownBody":"# Upgrade Guide\n\n\n## Upgrading to v1.2\n\n- Expression syntax has changed...\n","slug":"docs/upgrade-guide","title":"Upgrade Guide"},{"excerpt":"Data utilities These items are convenience functions for common data processing work done for pydeck maps. pydeck.datautils.viewporthelpers…","rawMarkdownBody":"# Data utilities\n\nThese items are convenience functions for common data processing work done for pydeck maps.\n\n\n### pydeck.data_utils.viewport_helpers.compute_view(points, view_proportion=1, view_type=<class 'pydeck.bindings.view_state.ViewState'>)\nAutomatically computes a zoom level for the points passed in.\n\n\n* **Parameters**\n\n    \n    * **points** (*list of list of float** or **pandas.DataFrame*) – A list of points\n\n\n    * **view_propotion** (*float**, **default 1*) – Proportion of the data that is meaningful to plot\n\n\n    * **view_type** (class constructor for pydeck.ViewState, default `pydeck.bindings.view_state.ViewState`) – Class constructor for a viewport. In the current version of pydeck,\n    users most likely do not have to modify this attribute.\n\n\n\n* **Returns**\n\n    Viewport fitted to the data\n\n\n\n* **Return type**\n\n    pydeck.Viewport\n\n\nFor example, suppose you have 100 points, most of which are centered\naround London and ten of which are distributed a few 100 kilometers away\nfrom it. If you set `view_proportion=0.9`, pydeck will attempt to fit\nto the middle 90% of the data, aiming to exclude the points furthest\nfrom the core of the visualization. Suppose your ten points\nare in the Americas in this example–they would be excluded.\n\n\n### pydeck.data_utils.color_scales.assign_random_colors(data_vector)\nProduces lookup table keyed by each class of data, with value as an RGB array\n\n\n* **Parameters**\n\n    **data_vector** (*list*) – Vector of data classes to be categorized, passed from the data itself\n\n\n\n* **Returns**\n\n    Dictionary of random RGBA value per class, keyed on class\n\n\n\n* **Return type**\n\n    collections.OrderedDict\n\n\n## Examples\n\nBelow is an illustration of `pydeck.data_utils.color_scales.assign_random_colors()`,\nusing a small data set of two classes (here, ‘Palace’ and ‘Clock Tower)\nand three obervations (‘Big Ben’, ‘Kensington Palace’, and ‘Buckingham Palace’).\nOur goal is to quickly color the data by category.\n\n```python\n>>> import pydeck\n>>> import pandas\n>>> data = pandas.DataFrame([\n>>>     {\n>>>         'site': 'Big Ben',\n>>>         'attraction_type': 'Clock Tower',\n>>>         'lat': 51.5006958,\n>>>         'lng': -0.1266639\n>>>     },\n>>>     {\n>>>         'site': 'Kensington Palace',\n>>>         'attraction_type': 'Palace':\n>>>         'lat': 51.5046188,\n>>>         'lng': -0.1839472\n>>>     },\n>>>     {\n>>>         'attraction_type': 'Palace',\n>>>         'site': 'Buckingham Palace',\n>>>         'lat': 51.501364,\n>>>         'lng': -0.14189\n>>>     }\n>>> ])\n>>> color_lookup = pydeck.data_utils.assign_random_colors(data['attraction_type'])\n>>> # Assign a color based on attraction_type\n>>> data['color'] = data.apply(lambda row: color_lookup.get(row['attraction_type']), axis=1)\n>>> # Data now has an RGB color by attraction type:\n[\n  {\n        'site': 'Big Ben',\n        'attraction_type': 'Clock Tower',\n        'lat': 51.5006958,\n        'lng': -0.1266639,\n        'color': [0, 10, 35]\n    },\n    {\n        'site': 'Kensington Palace',\n        'attraction_type': 'Palace':\n        'lat': 51.5046188,\n        'lng': -0.1839472,\n        'color': [53, 243, 130]\n    },\n  {\n        'attraction_type': 'Palace',\n        'site': 'Buckingham Palace',\n        'lat': 51.501364,\n        'lng': -0.14189,\n        'color': [53, 243, 130]\n    }\n]\n```\n","slug":"docs/generated-markdown/data_utils","title":"Data utilities"},{"excerpt":"Deck class pydeck.bindings.deck.Deck(layers=[], views={\"@@type\": \"MapView\", \"controller\": true}, mapstyle='mapbox://styles/mapbox/dark-v…","rawMarkdownBody":"# Deck\n\n\n### class pydeck.bindings.deck.Deck(layers=[], views=[{\"@@type\": \"MapView\", \"controller\": true}], map_style='mapbox://styles/mapbox/dark-v9', mapbox_key=None, initial_view_state=None, width='100%', height=500, tooltip=True, description=None, effects=None)\nThis is the renderer and configuration for a deck.gl visualization, similar to the\n[Deck](https://deck.gl/#/documentation/deckgl-api-reference/deck) class from deck.gl.\nPass Deck a Mapbox API token to display a basemap; see the notes below.\n\n\n* **Parameters**\n\n    \n    * **layers** (*pydeck.Layer** or **list of pydeck.Layer**, **default** [**]*) – List of `pydeck.bindings.layer.Layer` layers to render.\n\n\n    * **views** (*list of pydeck.View**, **[**]*) – List of `pydeck.bindings.view.View` objects to render.\n\n\n    * **map_style** (*str**, **default 'mapbox://styles/mapbox/dark-v9'*) – URI for Mapbox basemap style. See Mapbox’s [gallery](https://www.mapbox.com/gallery/) for examples.\n    If not using a basemap, you can set this value to to an empty string, ‘’.\n\n\n    * **initial_view_state** (*pydeck.ViewState**, **default None*) – Initial camera angle relative to the map, defaults to a fully zoomed out 0, 0-centered map\n    To compute a viewport from data, see `pydeck.data_utils.viewport_helpers.compute_view()`\n\n\n    * **mapbox_key** (*str**, **default None*) – Read on initialization from the MAPBOX_API_KEY environment variable. Defaults to None if not set.\n    See your Mapbox\n    [dashboard](https://docs.mapbox.com/help/how-mapbox-works/access-tokens/#mapbox-account-dashboard)\n    to get an API token.\n    If not using a basemap, you can set this value to ‘’.\n\n\n    * **height** (*int**, **default 500*) – Height of Jupyter notebook cell, in pixels.\n\n\n    * **width** (*int\\`** or **string**, **default '100%'*) – Width of visualization, in pixels (if a number) or as a CSS value string.\n\n\n    * **tooltip** (*bool** or **dict of {str: str}**, **default True*) – If `True`/`False`, toggles a default tooltip on visualization hover.\n    Layers must have `pickable=True` set in order to display a tooltip.\n    For more advanced usage, the user can pass a dict to configure more custom tooltip features.\n    Documentation on this is available [in the hosted pydeck documentation](tooltip.html).\n\n\n\n#### show()\nDisplay current Deck object for a Jupyter notebook\n\n\n#### to_html(filename=None, open_browser=False, notebook_display=True, iframe_width=700, iframe_height=500, \\*\\*kwargs)\nWrite a file and loads it to an iframe, if in a Jupyter environment;\notherwise, write a file and optionally open it in a web browser\n\n\n* **Parameters**\n\n    \n    * **filename** (*str**, **default None*) – Name of the file. If no name is provided, a randomly named file will be written locally.\n\n\n    * **open_browser** (*bool**, **default False*) – Whether a browser window will open or not after write\n\n\n    * **notebook_display** (*bool**, **default True*) – Attempts to display the HTML output in an iframe if True. Only works in a Jupyter environment.\n\n\n    * **iframe_width** (*int**, **default 700*) – Height of Jupyter notebook iframe in pixels, if rendered in a Jupyter environment.\n\n\n    * **iframe_height** (*int**, **default 500*) – Width of Jupyter notebook iframe in pixels, if rendered in a Jupyter environment.\n\n\n\n* **Returns**\n\n    Returns absolute path of the file\n\n\n\n* **Return type**\n\n    str\n\n\n\n#### update()\nUpdate a deck.gl map to reflect the current configuration\n\nFor example, if you’ve modified data passed to Layer and rendered the map using .show(),\nyou can call update to change the data on the map.\n\nIntended for use in a Jupyter environment.\n","slug":"docs/generated-markdown/deck","title":"Deck"},{"excerpt":"Welcome to pydeck’s documentation! If you have not already, follow the installation instructions pydeck Layer Overview and Examples…","rawMarkdownBody":"# Welcome to pydeck’s documentation!\n\nIf you have not already, [follow the installation instructions](https://github.com/uber/deck.gl/blob/master/bindings/pydeck/README.md)\n\n\n* pydeck Layer Overview and Examples\n\n\n    * Understanding keyword arguments in pydeck layers\n\n\n    * The `type` positional argument\n\n\n    * Expression parsers in pydeck objects\n\n\n    * Passing string constants\n\n\n    * Understanding get_position\n\n\n* Example: Vancouver property values\n\n\n* Deck\n\n\n* Data utilities\n\n\n    * Examples\n\n\n* Configuring the pydeck tooltip\n\n\n    * Templating syntax\n\n\n    * Examples\n\n\n* ViewState\n\n\n* View\n\n\n* LightSettings\n\n\n## [Layers](layer.html)\n\nConfigure one of the many deck.gl layers for rendering in pydeck\n\n## [Deck](deck.html)\n\nUsed to write data out to a widget in Jupyter, save it out to HTML, and\nconfigure some global parameters of a visualization, like its size or\ntooltip.\n\n## [Data utilities](data_utils.html)\n\nA handful of functions to make certain common data exercises easier,\nlike automatically fitting to data on a map or coloring categorical data.\n\n## [ViewState](view_state.html)\n\nUsed to set the precise location of a user’s vantage point on the data, like\na user’s zoom level.\n\n## [View](view.html)\n\nUsed to enable/disable map controls and also modify the kind of map projection,\nlike plotting in flat plane instead of plotting on a mercator projection.\n\n## [LightSettings (Experimental)](light_settings.html)\n\nConfigure the lighting within a visualization.\n\n## Caveats\n\n\n* Please note that pydeck assumes Internet access. You will need an Internet connection or the visualization will not render.\n\n\n* Currently, in its beta version **pydeck will NOT raise an error on incorrect or omitted layer arguments**.If nothing renders in your viewport, check your browser’s [developer console](https://javascript.info/devtools)or review the layer catalog. If you’re still stuck, file an issue by clicking [here](https://github.com/uber/deck.gl/issues/new?assignees=&labels=bug&template=bug-report.md&title=).# Indices and tables\n\n\n* Index\n\n\n* Module Index\n\n\n* Search Page\n","slug":"docs/generated-markdown/index","title":"Welcome to pydeck’s documentation!"},{"excerpt":"LightSettings Light settings are experimental in the pydeck beta. class pydeck.bindings.lightsettings.LightSettings(numberoflights=…","rawMarkdownBody":"# LightSettings\n\nLight settings are experimental in the pydeck beta.\n\n\n### class pydeck.bindings.light_settings.LightSettings(number_of_lights=2, lights_position=None, diffuse_ratio=None, specular_ratio=None, lights_strength=None, ambient_ratio=None)\nBases: `pydeck.bindings.json_tools.JSONMixin`\n\nConfiguration of lights on the plane\n\n\n* **Parameters**\n\n    \n    * **lights_position** (*array**, **default None*) – Location of lights in an array of X/Y/Z coordinates\n\n\n    * **diffuse_ratio** (*float**, **default None*) – Proportion of light at many angles\n\n\n    * **specular_ratio** (*float**, **default None*) – Proportion of light reflected in a mirror-like manner\n\n\n    * **lights_strength** (*array**, **default None*) – Brightness of lights\n\n\n    * **number_of_lights** (*int**, **default None*) – Number of lights in visualization\n","slug":"docs/generated-markdown/light_settings","title":"LightSettings"},{"excerpt":"Configuring the pydeck tooltip While you can get a tooltip in pydeck by simply setting  in the\n constructor, you may want a more…","rawMarkdownBody":"# Configuring the pydeck tooltip\n\nWhile you can get a tooltip in pydeck by simply setting `Deck(tooltip=True)` in the\n`pydeck.bindings.deck.Deck` constructor, you may want a more customizable one than the default.\n\nTo achieve this, `pydeck.bindings.deck.Deck` `tooltip` parameter can take a dictionary with the following keys:\n\n\n* `html`: Set the [innerHTML](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML) of the tooltip.\n\n\n* `text`: Set the [innerText](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText) of the tooltip.\n\n\n* `style`: A dictionary of CSS styles that will modify the default style of the tooltip.\n\nNote that you should only provide either html or text, but not both.\n\n## Templating syntax\n\nA lightweight template syntax is available to both the text and html keys,\nusing similar conventions as Python’s .format syntax with variable names.\n\n```\ntooltip = {\n   \"html\": \"<b>Elevation Value:</b> {elevationValue} <br/> <b>Color Value:</b> {colorValue}\",\n   \"style\": {\n        \"backgroundColor\": \"steelblue\",\n        \"color\": \"white\"\n   }\n}\n```\n\nVariable names available to the template are top level primitives in an individual\nrow of data given by deck.gl’s [pickingInfo.object](https://github.com/uber/deck.gl/blob/master/docs/developer-guide/interactivity.md#the-picking-info-object) and vary by layer.\nFor example, in an aggregation layer like `HexagonLayer`, the\ntop-level attributes for an individual picked datum include `elevationValue`,\n`colorValue` and a list of `points` under the cursor.\n\n`elevationValue` and `colorValue` would be available to the template engine,\nwhereas individual points in the `points` array would not.\n\n## Examples\n\nSetting the tooltip’s HTML value and CSS:\n\n```\ntooltip = {\n   \"html\": \"<b>Elevation Value:</b> {elevationValue}\",\n   \"style\": {\n        \"backgroundColor\": \"steelblue\",\n        \"color\": \"white\"\n   }\n}\n```\n\n\n\n![image](https://i.imgur.com/5tcpgYN.png)\n\nJust setting the text:\n\n```\ntooltip = {\n    \"text\": \"Elevation: {elevationValue}\"\n}\n```\n\n\n\n![image](https://i.imgur.com/FSkiBVW.png)\n\nA full demo is below:\n\n```\nimport pydeck as pdk\n\nlayer = pdk.Layer(\n    'HexagonLayer',\n    UK_ACCIDENTS_DATA,\n    get_position='[lng, lat]',\n    auto_highlight=True,\n    elevation_scale=50,\n    pickable=True,\n    elevation_range=[0, 3000],\n    extruded=True,\n    coverage=1)\n\n# Set the viewport location\nview_state = pdk.ViewState(\n    longitude=-1.415,\n    latitude=52.2323,\n    zoom=6,\n    min_zoom=5,\n    max_zoom=15,\n    pitch=40.5,\n    bearing=-27.36)\n\n# Combined all of it and render a viewport\nr = pdk.Deck(\n    layers=[layer],\n    initial_view_state=view_state,\n    tooltip={\n        'html': '<b>Elevation Value:</b> {elevationValue}',\n        'style': {\n            'color': 'white'\n        }\n    }\n)\nr.to_html()\n```\n","slug":"docs/generated-markdown/tooltip","title":"Configuring the pydeck tooltip"},{"excerpt":"pydeck Layer Overview and Examples  represents a kind of data visualization, like a scatterplot\nor a hexbin chart.\nThe full deck.gl layer…","rawMarkdownBody":"# pydeck Layer Overview and Examples\n\n`pydeck.bindings.layer.Layer` represents a kind of data visualization, like a scatterplot\nor a hexbin chart.\nThe full [deck.gl layer catalog](https://github.com/uber/deck.gl/tree/master/docs/layers#deckgl-layer-catalog-overview) is accessible via pydeck.\nThis page will provide more examples of how to utilize the deck.gl catalog in Python via pydeck.\n\n**WARNING**: Currently, in its beta version **pydeck will NOT raise an error on\nincorrect or omitted layer arguments**. If nothing renders in\nyour viewport, check your browser’s\n[developer console](https://javascript.info/devtools) or review the layer catalog.\nIf you’re still stuck, file an issue with clicking [here](https://github.com/uber/deck.gl/issues/new?assignees=&labels=bug&template=bug-report.md&title=).\n\n\n### class pydeck.bindings.layer.Layer(type, data, id=None, use_binary_transport=None, \\*\\*kwargs)\nConfigures a deck.gl layer for rendering on a map. Parameters passed\nhere will be specific to the particular deck.gl layer that you are choosing to use.\n\nPlease see the deck.gl\n[Layer catalog](https://deck.gl/#/documentation/deckgl-api-reference/layers/overview)\nto determine the particular parameters of your layer. You are highly encouraged to look\nat the examples in the pydeck documentation.\n\n\n* **Parameters**\n\n    \n    * **type** (*str*) – Type of layer to render, e.g., HexagonLayer\n\n\n    * **id** (*str**, **default None*) – Unique name for layer\n\n\n    * **data** (*str** or **list of dict of {str: Any}** or **pandas.DataFrame*) – Either a URL of data to load in or an array of data\n\n\n    * **use_binary_transport** (*bool**, **default None*) – Boolean indicating binary data\n\n\n    * **\\*\\*kwargs** – Any of the parameters passable to a deck.gl layer.\n\n\n### Examples\n\nFor example, here is a HexagonLayer which reads data from a URL.\n\n```python\n>>> import pydeck\n>>> # 2014 location of car accidents in the UK\n>>> UK_ACCIDENTS_DATA = ('https://raw.githubusercontent.com/uber-common/'\n>>>                     'deck.gl-data/master/examples/3d-heatmap/heatmap-data.csv')\n>>> # Define a layer to display on a map\n>>> layer = pydeck.Layer(\n>>>     'HexagonLayer',\n>>>     UK_ACCIDENTS_DATA,\n>>>     get_position=['lng', 'lat'],\n>>>     auto_highlight=True,\n>>>     elevation_scale=50,\n>>>     pickable=True,\n>>>     elevation_range=[0, 3000],\n>>>     extruded=True,\n>>>     coverage=1)\n```\n\nAlternately, input can be a pandas.DataFrame:\n\n```python\n>>> import pydeck\n>>> df = pd.read_csv(UK_ACCIDENTS_DATA)\n>>> layer = pydeck.Layer(\n>>>     'HexagonLayer',\n>>>     df,\n>>>     get_position=['lng', 'lat'],\n>>>     auto_highlight=True,\n>>>     elevation_scale=50,\n>>>     pickable=True,\n>>>     elevation_range=[0, 3000],\n>>>     extruded=True,\n>>>     coverage=1)\n```\n\n## Understanding keyword arguments in pydeck layers\n\nKeyword arguments vary by layer. A catalog of available layers in\ndeck.gl is viewable\n[in the deck.gl layer catalog](https://github.com/uber/deck.gl/tree/master/docs/layers#deckgl-layer-catalog-overview).\n\nA few important observations:\n\n\n* Not all layers have all parameters. For instance, `get_position` is\navailable for a `ScatterplotLayer` but not `ArcLayer`. Be sure to\nrefer to the deck.gl layer catalog to know the arguments a particular layer can be passed.\n\n\n* Styling conventions differ between deck.gl and pydeck. While you can\npass pydeck camelCased parameters, many prefer to adhere to the more common\n“snake_cased” standard. The deck.gl layer catalog documentation adheres to Javascript documentation\nstandards; in pydeck, functions and class names follow Python\nconventions:\n\n\n    * Layer parameters are `snake_case` in pydeck (e.g., `getPosition` in deck.gl is\n`get_position` in pydeck)\n\n\n    * Layer class names in deck.gl are the same in pydeck\n(e.g., `HexagonLayer` remains `HexagonLayer` in both\nlibraries) and are passed via the type argument\n\n## The `type` positional argument\n\nIn the `pydeck.Layer` object, `type` is a required argument and\nwhere you pass the desired layer’s deck.gl class name–that is, you\nshould set it to the deck.gl layer you wish to plot. For example, notice\nhow passing `\"HexagonLayer\"` to\\`\\`type\\`\\` below gives you a [deck.gl\nHexagonLayer](https://deck.gl/#/examples/core-layers/hexagon-layer):\n\n```\nimport pydeck as pdk\n\nUK_ACCIDENTS_DATA = 'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/3d-heatmap/heatmap-data.csv'\n\nlayer = pdk.Layer(\n    'HexagonLayer',  # `type` positional argument is here\n    UK_ACCIDENTS_DATA,\n    get_position=['lng', 'lat'],\n    auto_highlight=True,\n    elevation_scale=50,\n    pickable=True,\n    elevation_range=[0, 3000],\n    extruded=True,\n    coverage=1)\n\n# Set the viewport location\nview_state = pdk.ViewState(\n    longitude=-1.415,\n    latitude=52.2323,\n    zoom=6,\n    min_zoom=5,\n    max_zoom=15,\n    pitch=40.5,\n    bearing=-27.36)\n\n# Combined all of it and render a viewport\nr = pdk.Deck(layers=[layer], initial_view_state=view_state)\nr.to_html('hexagon-example.html')\n```\n\n\n\n![image](https://i.imgur.com/kPYIKUl.png)\n\nTry changing `type` above to `ScatterplotLayer` and add some\n`ScatterplotLayer` attributes, like `get_fill_color` and `get_radius`:\n\n```\nlayer = pdk.Layer(\n    'ScatterplotLayer',     # Change the `type` positional argument here\n    UK_ACCIDENTS_DATA,\n    get_position=['lng', 'lat'],\n    auto_highlight=True,\n    get_radius=1000,          # Radius is given in meters\n    get_fill_color=[180, 0, 200, 140],  # Set an RGBA value for fill\n    pickable=True)\n```\n\n\n\n![image](https://i.imgur.com/54a7buL.png)\n\n## Expression parsers in pydeck objects\n\nOne particularly powerful feature of pydeck is an in-built Javascript\nexpression parser that can process a limited subset of Javascript–no\nfunctions are allowed, but data accessors, Boolean conditions, inline\nlogical statements, arithmetic operations, and arrays are available.\nThe full details on the deck.gl expression parser are viewable [here](https://github.com/uber/deck.gl/blob/master/docs/api-reference/json/conversion-reference.md).\n\nTo demonstrate the expression parser, change the color input in\n`get_fill_color` to a string:\n\n```\nlayer = pdk.Layer(\n    'ScatterplotLayer',\n    UK_ACCIDENTS_DATA,\n    get_position=['lng', 'lat'],\n    auto_highlight=True,\n    get_radius=1000,\n    get_fill_color='[180, 0, 200, 140]',\n    pickable=True)\n```\n\n\n\n![image](https://i.imgur.com/54a7buL.png)\n\nYou will notice nothing has changed. The\nexpression parser in deck.gl processes the `get_fill_color` argument\nof `'[180, 0, 200, 140]'` and converts it to a list of constants.\n\nImportantly, the expression parser has access to the\nvariables in your data, so you can pass them from Python for use in deck.gl:\n\n```\nlayer = pdk.Layer(\n    'ScatterplotLayer',\n    UK_ACCIDENTS_DATA,\n    get_position=['lng', 'lat'],\n    auto_highlight=True,\n    get_radius=1000,\n    get_fill_color=[255, 'lng > 0 ? 200 * lng : -200 * lng', 'lng', 140],\n    pickable=True)\n```\n\n## Passing string constants\n\nStrings most often in pydeck indicate a data set or deck.gl variable name but\noccasionally indicate a constant. In order to indiciate to the library that you’re passing a string constant,\nyou must quote the string. For example, below\nwe plot the mean of billions of dollars of profit per employee by passing `'\"MEAN\"'` to `aggregation`,\ngiving us the average for that statistic within an area:\n\n```\nDATA_SOURCE = 'https://raw.githubusercontent.com/ajduberstein/geo_datasets/master/fortune_500.csv'\n\nlayer = pydeck.Layer(\n    \"HeatmapLayer\",\n    DATA_SOURCE,\n    opacity=0.9,\n    get_position=[\"longitude\", \"latitude\"],\n    aggregation='\"MEAN\"',\n    get_weight=\"profit / employees > 0 ? profit / employees : 0\")\n```\n\n\n\n![image](https://i.imgur.com/vJIfe71.png)\n\n## Understanding get_position\n\nYou may have noticed that `get_position` takes `['lng', 'lat']` in many of these\nexamples. This is deck.gl’s expression parser reading the data passed to\npydeck and extracting longitude and latitude as a coordinate pair.\n\nSuppose you have a CSV as follows, where the location is the first field\nin the CSV (here, coordinates)–\n\n```\ncoordinates,classification\n\"[0.0, 0.0]\",A\n\"[0.0, 0.0]\",A\n\"[0.0, 1.0]\",B\n\"[0.0, 1.0]\",C\n```\n\nFor this data, `get_position` here should be specified as `get_position='coordinates'`\n\nIn many data sets, the coordinates are flattened:\n\n```\nlng,lat,classification\n0.0,0.0,A\n0.0,0.0,A\n0.0,1.0,B\n0.0,1.0,C\n```\n\nFor the above data, you would specify your position as `get_position='[lng,lat]'`\n\nSometimes your data is a list of x/y pairs. In this case, for convenience,\nthe deck.gl expression parser lets you pass a ‘-‘ to get_position:\n\n```\n[[0, 0], [0, 0], [0, 1.0], [0, 1.0]]\n```\n\nIf your data is shaped as above, get_position=’-‘ should correctly parse the input.\n\n# Example: Vancouver property values\n\nBelow, an example combining the expression parser with multiple layers, based on the deck.gl\n[Vancouver property values example](https://deck.gl/#/examples/core-layers/geojson-layer-polygons).\n\n```\nimport pydeck\n\nDATA_URL = \"https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/geojson/vancouver-blocks.json\"\nLAND_COVER = [[[-123.0, 49.196], [-123.0, 49.324], [-123.306, 49.324], [-123.306, 49.196]]]\n\nINITIAL_VIEW_STATE = pydeck.ViewState(\n  latitude=49.254,\n  longitude=-123.13,\n  zoom=11,\n  max_zoom=16,\n  pitch=45,\n  bearing=0\n)\n\npolygon = pydeck.Layer(\n    'PolygonLayer',\n    LAND_COVER,\n    stroked=False,\n    # processes the data as a flat longitude-latitude pair\n    get_polygon='-',\n    get_fill_color=[0, 0, 0, 20]\n)\n\ngeojson = pydeck.Layer(\n    'GeoJsonLayer',\n    DATA_URL,\n    opacity=0.8,\n    stroked=False,\n    filled=True,\n    extruded=True,\n    wireframe=True,\n    get_elevation='properties.valuePerSqm / 20',\n    get_fill_color='[255, 255, properties.growth * 255]',\n    get_line_color=[255, 255, 255],\n    pickable=True\n)\n\nr = pydeck.Deck(\n    layers=[polygon, geojson],\n    initial_view_state=INITIAL_VIEW_STATE)\n\nr.to_html()\n```\n\n\n\n![image](https://i.imgur.com/M3toZK8.png)\n","slug":"docs/generated-markdown/layer","title":"pydeck Layer Overview and Examples"},{"excerpt":"View class pydeck.bindings.view.View(type=None, controller=None) Bases:  Represents a “hard configuration” of a camera location Parameters…","rawMarkdownBody":"# View\n\n\n### class pydeck.bindings.view.View(type=None, controller=None)\nBases: `pydeck.bindings.json_tools.JSONMixin`\n\nRepresents a “hard configuration” of a camera location\n\n\n* **Parameters**\n\n    \n    * **type** (*str**, **default None*) – deck.gl view to display, e.g., MapView\n\n\n    * **controller** (*bool**, **default None*) – If enabled, camera becomes interactive.\n\n\n\n#### property type()\n","slug":"docs/generated-markdown/view","title":"View"},{"excerpt":"ViewState class pydeck.bindings.viewstate.ViewState(longitude=None, latitude=None, zoom=None, minzoom=None, max_zoom=None, pitch=None…","rawMarkdownBody":"# ViewState\n\n\n### class pydeck.bindings.view_state.ViewState(longitude=None, latitude=None, zoom=None, min_zoom=None, max_zoom=None, pitch=None, bearing=None, \\*\\*kwargs)\nAn object that represents where the state of a viewport, essentially where the screen is focused.\n\nIf you have two dimensional data and you don’t want to set this manually,\nsee `pydeck.data_utils.viewport_helpers.compute_view()`.\n\n\n* **Parameters**\n\n    \n    * **longitude** (*float**, **default None*) – x-coordinate of focus\n\n\n    * **latitude** (*float**, **default None*) – y-coordinate of focus\n\n\n    * **zoom** (*float**, **default None*) – Magnification level of the map, usually between 0 (representing the whole world)\n    and 24 (close to individual buildings)\n\n\n    * **min_zoom** (*float**, **default None*) – Least mangified zoom level the user can navigate to\n\n\n    * **max_zoom** (*float**, **default None*) – Most magnified zoom level the user can navigate to\n\n\n    * **pitch** (*float**, **default None*) – Up/down angle relative to the map’s plane, with 0 being looking directly at the map\n\n\n    * **bearing** (*float**, **default None*) – Left/right angle relative to the map’s true north, with 0 being aligned to true north\n","slug":"docs/generated-markdown/view_state","title":"ViewState"},{"excerpt":"What's New v0.2.0 Release Date:  Dynamic load of layer modules... v0.1.2 Release Date:  Expression syntax ...","rawMarkdownBody":"# What's New\n\n## v0.2.0\n\nRelease Date: \n\n- Dynamic load of layer modules...\n\n\n### v0.1.2\n\nRelease Date: \n\n- Expression syntax\n\n\n...","slug":"docs/whats-new","title":"What's New"}]}}}
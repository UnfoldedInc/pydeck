{"componentChunkName":"component---node-modules-gatsby-theme-ocular-src-react-templates-search-jsx","path":"/search","result":{"pageContext":{"data":[{"excerpt":"Roadmap Early ideas: Error checking is still a pain point. deck.gl because of language differences lacks errors that would obviously be…","rawMarkdownBody":"# Roadmap\n\nEarly ideas:\n\n- Error checking is still a pain point. deck.gl because of language differences lacks errors that would obviously be thrown in python (more often than I'd like, I'll specify a layer attribute like color from a field that's not in my data set)\n- Categorical legends, time scrubbers, and \"explanation boxes\" like on the top right corner of this example: https://deck.gl/#/examples/core-layers/hexagon-layer\n- integration with something like kepler–specify your map configuration/viewport settings in kepler and then copy/paste them into pydeck, and/or use pydeck to configure kepler like arcpy configures arcgis\n\nAdd references to RFCs/github issues\n\n","slug":"docs/roadmap","title":"Roadmap"},{"excerpt":"pydeck Welcome to  (deck.gl bindings for Python).  This is the documentation for   hosted on the pydeck.gl domain.  Attribution The  domain…","rawMarkdownBody":"# pydeck\n\nWelcome to `pydeck` (deck.gl bindings for Python). \n\nThis is the documentation for `pydeck`  hosted on the pydeck.gl domain. \n\n\n## Attribution\n\nThe `pydeck.gl` domain as well as the `pydeck` documentation repository are provided by [Unfolded, Inc](www.unfolded.ai).\n\nThe actual documentation is generated directly from Uber's [deck.gl](https://github.com/uber/deck.gl) repository.\n","slug":"docs","title":"pydeck"},{"excerpt":"Upgrade Guide Upgrading to v1.2 Expression syntax has changed...","rawMarkdownBody":"# Upgrade Guide\n\n\n## Upgrading to v1.2\n\n- Expression syntax has changed...\n","slug":"docs/upgrade-guide","title":"Upgrade Guide"},{"excerpt":"What's New v0.2.0 Release Date:  Dynamic load of layer modules... v0.1.2 Release Date:  Expression syntax ...","rawMarkdownBody":"# What's New\n\n## v0.2.0\n\nRelease Date: \n\n- Dynamic load of layer modules...\n\n\n### v0.1.2\n\nRelease Date: \n\n- Expression syntax\n\n\n...","slug":"docs/whats-new","title":"What's New"},{"excerpt":"Binary data transfer Motivation Often for visualizations in genomics, massive social networks, or sensor data visualizations,\nit helps to be…","rawMarkdownBody":"# Binary data transfer\n\n## Motivation\n\nOften for visualizations in genomics, massive social networks, or sensor data visualizations,\nit helps to be able to plot millions rather than simply hundreds of thousands of points.\n\nBy default, pydeck sends data from Jupyter to the frontend by serializing data to JSON. However, for massive data sets,\nthe costs to serialize and deserialize this JSON can prevent a visualization from rendering.\n\nIn order to get around this, pydeck supports binary data transfer, which significantly reduces data size. Binary transfer relies\non [NumPy](https://numpy.org/) and its [typed arrays](https://numpy.org/devdocs/user/basics.types.html),\nwhich are converted to [JavaScript typed arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) and passed to\ndeck.gl [using precalculated binary attributes](https://deck.gl/#/documentation/developer-guide/performance-optimization?section=supply-attributes-directly).\n\n## Usage\n\nBinary transport will only work if the following requirements are met:\n\n\n* `use_binary_transport` must be set to `True` explictly on your `Layer`\n\n\n* Layer input data must be a `pandas.DataFrame` object.\n\n\n* Data that is not intend to be rendered should not be passed into the layer.\n\n\n* Accessor names must be strings representing column names within the data frame,\ne.g., `get_position='position'` is correct, **not** `get_position=['x', 'y']`.\nFor example,\n\nThis data format, where `x` & `y` represent a position and `r`, `g`, and `b` represent color values,\n\n> | x\n\n>  | y\n\n>  | r\n\n>  | g\n\n>  | b\n\n>  |\n> | - | - | - | - | - |\n> | 0\n\n>  | 1\n\n>  | 0\n\n>  | 0\n\n>  | 0\n\n>  |\n> | 0\n\n>  | 5\n\n>  | 255\n\n>  | 0\n\n>  | 0\n\n>  |\n> | 5\n\n>  | 1\n\n>  | 255\n\n>  | 255\n\n>  | 0\n\n>  |\nshould be converted to this format\n\n> | position\n\n>  | color\n\n>  |\n> | -------- | ----- |\n> | [0, 1]\n\n>    | [0, 0, 0]\n\n>  |\n> | [0, 5]\n\n>    | [255, 0, 0]\n\n>  |\n> | [5, 1]\n\n>    | [255, 255, 0]\n\n>  |\n\n* Binary transfer only works within Jupyter environments via `pydeck.bindings.deck.Deck.show()`. It relies on the socket-level\ncommunication built into the Jupyter environment.\n\n## Example\n\n```\n\"\"\"\nBinary Transport\n================\n\nExample of binary transport in pydeck. This notebook renders 10k points via the web sockets within\na Jupyter notebook if you run the ``generate_vis()`` function\n\"\"\"\nimport pydeck\n\nimport pandas as pd\n\n\nNODES_URL = \"https://raw.githubusercontent.com/ajduberstein/geo_datasets/master/social_nodes.csv\"\n\n\ndef generate_graph_data(num_nodes, random_seed):\n    \"\"\"Generates a graph of 10k nodes with a 3D force layout\n\n    This function is unused but serves as an example of how the data in\n    this visualization was generated\n    \"\"\"\n    import networkx as nx  # noqa\n\n    g = nx.random_internet_as_graph(num_nodes, random_seed)\n    node_positions = nx.fruchterman_reingold_layout(g, dim=3)\n\n    force_layout_df = pd.DataFrame.from_records(node_positions).transpose()\n    force_layout_df[\"group\"] = [d[1][\"type\"] for d in g.nodes.data()]\n    force_layout_df.columns = [\"x\", \"y\", \"z\", \"group\"]\n    return force_layout_df\n\n\ndef make_renderer(nodes, use_binary_transport=False):\n    \"\"\"Creates the pydeck visualization for rendering\"\"\"\n    view_state = pydeck.ViewState(offset=[0, 0], latitude=None, longitude=None, bearing=None, pitch=None, zoom=1,)\n\n    views = [pydeck.View(type=\"OrbitView\", controller=True)]\n\n    nodes_layer = pydeck.Layer(\n        \"PointCloudLayer\",\n        nodes,\n        get_position=\"position\",\n        get_normal=[10, 100, 10],\n        get_color=\"color\",\n        pickable=True,\n        # Set use_binary_transport to `True`\n        use_binary_transport=use_binary_transport,\n        auto_highlight=True,\n        highlight_color=[255, 255, 0],\n        radius=50,\n    )\n\n    return pydeck.Deck(layers=[nodes_layer], initial_view_state=view_state, views=views, map_style=None,)\n\n\nr = None\n\n\ndef generate_vis(notebook_display=False):\n    global r\n    nodes = pd.read_csv(NODES_URL)\n\n    colors = pydeck.data_utils.assign_random_colors(nodes[\"group\"])\n    # Divide by 255 to normalize the colors\n    # Specify positions and colors as columns of lists\n    nodes[\"color\"] = nodes.apply(lambda row: [c / 255 for c in colors.get(row[\"group\"])], axis=1)\n    nodes[\"position\"] = nodes.apply(lambda row: [row[\"x\"], row[\"y\"], row[\"z\"]], axis=1)\n\n    # Remove all unused columns\n    del nodes[\"x\"]\n    del nodes[\"y\"]\n    del nodes[\"z\"]\n    del nodes[\"group\"]\n\n    if not notebook_display:\n        r = make_renderer(nodes, use_binary_transport=False)\n        r.to_html(\"graph_example.html\", notebook_display=notebook_display)\n    else:\n        r = make_renderer(nodes, use_binary_transport=True)\n        display(r.show())  # noqa\n\n\nif __name__ == \"__main__\":\n    generate_vis()\n```\n","slug":"docs/generated-markdown/binary_transfer","title":"Binary data transfer"},{"excerpt":"Custom layers Custom deck.gl layers are available in pydeck, loaded dynamically. Layers are loaded dynamically by the frontend, when the…","rawMarkdownBody":"# Custom layers\n\nCustom deck.gl layers are available in pydeck, loaded dynamically.\n\nLayers are loaded dynamically by the frontend, when the output from\n`pydeck.bindings.deck.Deck.show()` or `pydeck.bindings.deck.Deck.to_html()` is called and loaded.\n\nCustom layers must subclass deck.gl’s Layer or CompositeLayer classes.\nThey must also include deck.gl and @deck.gl/layers as external libraries in the webpack config.\nYou can see [this repo](https://github.com/ajduberstein/pydeck_custom_layer) for a minimal example.\n\nCode for usage of that example layer can be seen here:\n\n```\n\"\"\"\nCustomLayer\n===========\n\nA custom layer named LabeledGeoJsonLayer copied from this Observable Notebook for use in pydeck:\n\nhttps://observablehq.com/@pessimistress/deck-gl-custom-layer-tutorial\n\nRegistering a custom layer requires some knowledge of JavaScript and bundling.\nSee https://github.com/ajduberstein/pydeck_custom_layer for a minimal example layer.\n\"\"\"\n\nimport pydeck\n\npydeck.settings.custom_libraries = [\n    {\n        \"libraryName\": \"LabeledGeoJsonLayerLibrary\",\n        \"resourceUri\": \"https://unpkg.com/pydeck-custom-layer-demo@0.0.1/dist/bundle.js\",\n    }\n]\n\nDATA_URL = \"https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json\"\n\ncustom_layer = pydeck.Layer(\n    \"LabeledGeoJsonLayer\",\n    data=DATA_URL,\n    filled=False,\n    billboard=False,\n    get_line_color=[180, 180, 180],\n    get_label=\"properties.name\",\n    get_label_size=200000,\n    get_label_color=[0, 255, 255],\n    label_size_units='\"meters\"',\n    line_width_min_pixels=1,\n)\n\nview_state = pydeck.ViewState(latitude=0, longitude=0, zoom=1)\n\nr = pydeck.Deck(custom_layer, initial_view_state=view_state, map_style=\"\",)\n\nr.to_html(\"custom_layer.html\", css_background_color=\"#333\", notebook_display=False)\n```\n\n\n\n![image](gallery/images/custom_layer.png)\n","slug":"docs/generated-markdown/custom_layers","title":"Custom layers"},{"excerpt":"Data utilities These items are convenience functions for common data processing work done for pydeck maps. pydeck.datautils.viewporthelpers…","rawMarkdownBody":"# Data utilities\n\nThese items are convenience functions for common data processing work done for pydeck maps.\n\n\n### pydeck.data_utils.viewport_helpers.compute_view(points, view_proportion=1, view_type=<class 'pydeck.bindings.view_state.ViewState'>)\nAutomatically computes a zoom level for the points passed in.\n\n\n* **Parameters**\n\n    \n    * **points** (*list of list of float** or **pandas.DataFrame*) – A list of points\n\n\n    * **view_propotion** (*float**, **default 1*) – Proportion of the data that is meaningful to plot\n\n\n    * **view_type** (class constructor for pydeck.ViewState, default `pydeck.bindings.view_state.ViewState`) – Class constructor for a viewport. In the current version of pydeck,\n    users most likely do not have to modify this attribute.\n\n\n\n* **Returns**\n\n    Viewport fitted to the data\n\n\n\n* **Return type**\n\n    pydeck.Viewport\n\n\nFor example, suppose you have 100 points, most of which are centered\naround London and ten of which are distributed a few 100 kilometers away\nfrom it. If you set `view_proportion=0.9`, pydeck will attempt to fit\nto the middle 90% of the data, aiming to exclude the points furthest\nfrom the core of the visualization. Suppose your ten points\nare in the Americas in this example–they would be excluded.\n\n\n### pydeck.data_utils.color_scales.assign_random_colors(data_vector)\nProduces lookup table keyed by each class of data, with value as an RGB array\n\n\n* **Parameters**\n\n    **data_vector** (*list*) – Vector of data classes to be categorized, passed from the data itself\n\n\n\n* **Returns**\n\n    Dictionary of random RGBA value per class, keyed on class\n\n\n\n* **Return type**\n\n    collections.OrderedDict\n\n\n## Examples\n\nBelow is an illustration of `pydeck.data_utils.color_scales.assign_random_colors()`,\nusing a small data set of two classes (here, ‘Palace’ and ‘Clock Tower)\nand three obervations (‘Big Ben’, ‘Kensington Palace’, and ‘Buckingham Palace’).\nOur goal is to quickly color the data by category.\n\n```python\n>>> import pydeck\n>>> import pandas\n>>> data = pandas.DataFrame([\n>>>     {\n>>>         'site': 'Big Ben',\n>>>         'attraction_type': 'Clock Tower',\n>>>         'lat': 51.5006958,\n>>>         'lng': -0.1266639\n>>>     },\n>>>     {\n>>>         'site': 'Kensington Palace',\n>>>         'attraction_type': 'Palace':\n>>>         'lat': 51.5046188,\n>>>         'lng': -0.1839472\n>>>     },\n>>>     {\n>>>         'attraction_type': 'Palace',\n>>>         'site': 'Buckingham Palace',\n>>>         'lat': 51.501364,\n>>>         'lng': -0.14189\n>>>     }\n>>> ])\n>>> color_lookup = pydeck.data_utils.assign_random_colors(data['attraction_type'])\n>>> # Assign a color based on attraction_type\n>>> data['color'] = data.apply(lambda row: color_lookup.get(row['attraction_type']), axis=1)\n>>> # Data now has an RGB color by attraction type:\n[\n  {\n        'site': 'Big Ben',\n        'attraction_type': 'Clock Tower',\n        'lat': 51.5006958,\n        'lng': -0.1266639,\n        'color': [0, 10, 35]\n    },\n    {\n        'site': 'Kensington Palace',\n        'attraction_type': 'Palace':\n        'lat': 51.5046188,\n        'lng': -0.1839472,\n        'color': [53, 243, 130]\n    },\n  {\n        'attraction_type': 'Palace',\n        'site': 'Buckingham Palace',\n        'lat': 51.501364,\n        'lng': -0.14189,\n        'color': [53, 243, 130]\n    }\n]\n```\n","slug":"docs/generated-markdown/data_utils","title":"Data utilities"},{"excerpt":"Deck class pydeck.bindings.deck.Deck(layers=[], views={'@@type': 'MapView', 'controller': true}, mapstyle='mapbox://styles/mapbox/dark-v…","rawMarkdownBody":"# Deck\n\n\n### class pydeck.bindings.deck.Deck(layers=[], views=[{'@@type': 'MapView', 'controller': true}], map_style='mapbox://styles/mapbox/dark-v9', mapbox_key=None, initial_view_state=None, width='100%', height=500, tooltip=True, description=None, effects=None)\nThis is the renderer and configuration for a deck.gl visualization, similar to the\n[Deck](https://deck.gl/#/documentation/deckgl-api-reference/deck) class from deck.gl.\nPass Deck a Mapbox API token to display a basemap; see the notes below.\n\n\n* **Parameters**\n\n    \n    * **layers** (*pydeck.Layer** or **list of pydeck.Layer**, **default** [**]*) – List of `pydeck.bindings.layer.Layer` layers to render.\n\n\n    * **views** (*list of pydeck.View**, **[**]*) – List of `pydeck.bindings.view.View` objects to render.\n\n\n    * **map_style** (*str**, **default 'mapbox://styles/mapbox/dark-v9'*) – URI for Mapbox basemap style. See Mapbox’s [gallery](https://www.mapbox.com/gallery/) for examples.\n    If not using a basemap, you can set this value to to an empty string, ‘’.\n\n\n    * **initial_view_state** (*pydeck.ViewState**, **default None*) – Initial camera angle relative to the map, defaults to a fully zoomed out 0, 0-centered map\n    To compute a viewport from data, see `pydeck.data_utils.viewport_helpers.compute_view()`\n\n\n    * **mapbox_key** (*str**, **default None*) – Read on initialization from the MAPBOX_API_KEY environment variable. Defaults to None if not set.\n    See your Mapbox\n    [dashboard](https://docs.mapbox.com/help/how-mapbox-works/access-tokens/#mapbox-account-dashboard)\n    to get an API token.\n    If not using a basemap, you can set this value to ‘’.\n\n\n    * **height** (*int**, **default 500*) – Height of Jupyter notebook cell, in pixels.\n\n\n    * **width** (*int\\`** or **string**, **default '100%'*) – Width of visualization, in pixels (if a number) or as a CSS value string.\n\n\n    * **tooltip** (*bool** or **dict of {str: str}**, **default True*) – If `True`/`False`, toggles a default tooltip on visualization hover.\n    Layers must have `pickable=True` set in order to display a tooltip.\n    For more advanced usage, the user can pass a dict to configure more custom tooltip features.\n    Documentation on this is available [in the hosted pydeck documentation](tooltip.html).\n\n\n\n#### show()\nDisplay current Deck object for a Jupyter notebook\n\n\n#### to_html(filename=None, open_browser=False, notebook_display=True, iframe_width=700, iframe_height=500, as_string=False, offline=False, \\*\\*kwargs)\nWrite a file and loads it to an iframe, if in a Jupyter environment;\notherwise, write a file and optionally open it in a web browser\n\n\n* **Parameters**\n\n    \n    * **filename** (*str**, **default None*) – Name of the file. If no name is provided, a randomly named file will be written locally.\n\n\n    * **open_browser** (*bool**, **default False*) – Whether a browser window will open or not after write\n\n\n    * **notebook_display** (*bool**, **default True*) – Attempts to display the HTML output in an iframe if True. Only works in a Jupyter environment.\n\n\n    * **iframe_width** (*int**, **default 700*) – Height of Jupyter notebook iframe in pixels, if rendered in a Jupyter environment.\n\n\n    * **iframe_height** (*int**, **default 500*) – Width of Jupyter notebook iframe in pixels, if rendered in a Jupyter environment.\n\n\n    * **as_string** (*bool**, **default False*) – Whether the HTML should be written as a string rather than to a file. Defaults to writing to a file.\n\n\n\n* **Returns**\n\n    Returns absolute path of the file\n\n\n\n* **Return type**\n\n    str\n\n\n\n#### update()\nUpdate a deck.gl map to reflect the current configuration\n\nFor example, if you’ve modified data passed to Layer and rendered the map using .show(),\nyou can call update to change the data on the map.\n\nIntended for use in a Jupyter environment.\n","slug":"docs/generated-markdown/deck","title":"Deck"},{"excerpt":"Layer Overview and Examples  represents a kind of data visualization, like a scatterplot\nor a hexbin chart.\nThe full deck.gl layer catalog…","rawMarkdownBody":"# Layer Overview and Examples\n\n`pydeck.bindings.layer.Layer` represents a kind of data visualization, like a scatterplot\nor a hexbin chart.\nThe full [deck.gl layer catalog](https://github.com/uber/deck.gl/tree/master/docs/layers#deckgl-layer-catalog-overview) is accessible via pydeck.\nThis page will provide more examples of how to utilize the deck.gl catalog in Python via pydeck.\n\n**WARNING**: **pydeck does not currently raise an error on\nincorrect or omitted layer arguments**. If nothing renders in\nyour viewport, check your browser’s\n[developer console](https://javascript.info/devtools) or review the layer catalog.\nIf you’re still stuck, file an issue with clicking [here](https://github.com/uber/deck.gl/issues/new?assignees=&labels=bug&template=bug-report.md&title=).\n\n\n### class pydeck.bindings.layer.Layer(type, data, id=None, use_binary_transport=None, \\*\\*kwargs)\nConfigures a deck.gl layer for rendering on a map. Parameters passed\nhere will be specific to the particular deck.gl layer that you are choosing to use.\n\nPlease see the deck.gl\n[Layer catalog](https://deck.gl/#/documentation/deckgl-api-reference/layers/overview)\nto determine the particular parameters of your layer. You are highly encouraged to look\nat the examples in the pydeck documentation.\n\n\n* **Parameters**\n\n    \n    * **type** (*str*) – Type of layer to render, e.g., HexagonLayer\n\n\n    * **id** (*str**, **default None*) – Unique name for layer\n\n\n    * **data** (*str** or **list of dict of {str: Any}** or **pandas.DataFrame*) – Either a URL of data to load in or an array of data\n\n\n    * **use_binary_transport** (*bool**, **default None*) – Boolean indicating binary data\n\n\n    * **\\*\\*kwargs** – Any of the parameters passable to a deck.gl layer.\n\n\n### Examples\n\nFor example, here is a HexagonLayer which reads data from a URL.\n\n```python\n>>> import pydeck\n>>> # 2014 location of car accidents in the UK\n>>> UK_ACCIDENTS_DATA = ('https://raw.githubusercontent.com/uber-common/'\n>>>                     'deck.gl-data/master/examples/3d-heatmap/heatmap-data.csv')\n>>> # Define a layer to display on a map\n>>> layer = pydeck.Layer(\n>>>     'HexagonLayer',\n>>>     UK_ACCIDENTS_DATA,\n>>>     get_position=['lng', 'lat'],\n>>>     auto_highlight=True,\n>>>     elevation_scale=50,\n>>>     pickable=True,\n>>>     elevation_range=[0, 3000],\n>>>     extruded=True,\n>>>     coverage=1)\n```\n\nAlternately, input can be a pandas.DataFrame:\n\n```python\n>>> import pydeck\n>>> df = pd.read_csv(UK_ACCIDENTS_DATA)\n>>> layer = pydeck.Layer(\n>>>     'HexagonLayer',\n>>>     df,\n>>>     get_position=['lng', 'lat'],\n>>>     auto_highlight=True,\n>>>     elevation_scale=50,\n>>>     pickable=True,\n>>>     elevation_range=[0, 3000],\n>>>     extruded=True,\n>>>     coverage=1)\n```\n\n## Understanding keyword arguments in pydeck layers\n\nKeyword arguments vary by layer. A catalog of available layers in\ndeck.gl is viewable\n[in the deck.gl layer catalog](https://github.com/uber/deck.gl/tree/master/docs/layers#deckgl-layer-catalog-overview).\n\nA few important observations:\n\n\n* Not all layers have all parameters. For instance, `get_position` is\navailable for a `ScatterplotLayer` but not `ArcLayer`. Be sure to\nrefer to the deck.gl layer catalog to know the arguments a particular layer can be passed.\n\n\n* Styling conventions differ between deck.gl and pydeck. While you can\npass pydeck camelCased parameters, many prefer to adhere to the more common\n“snake_cased” standard. The deck.gl layer catalog documentation adheres to Javascript documentation\nstandards; in pydeck, functions and class names follow Python\nconventions:\n\n\n    * Layer parameters are `snake_case` in pydeck (e.g., `getPosition` in deck.gl is\n`get_position` in pydeck)\n\n\n    * Layer class names in deck.gl are the same in pydeck\n(e.g., `HexagonLayer` remains `HexagonLayer` in both\nlibraries) and are passed via the type argument\n\n## The `type` positional argument\n\nIn the `pydeck.Layer` object, `type` is a required argument and\nwhere you pass the desired layer’s deck.gl class name–that is, you\nshould set it to the deck.gl layer you wish to plot. For example, notice\nhow passing `\"HexagonLayer\"` to\\`\\`type\\`\\` below gives you a [deck.gl\nHexagonLayer](https://deck.gl/#/examples/core-layers/hexagon-layer):\n\n```\nimport pydeck as pdk\n\nUK_ACCIDENTS_DATA = 'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/3d-heatmap/heatmap-data.csv'\n\nlayer = pdk.Layer(\n    'HexagonLayer',  # `type` positional argument is here\n    UK_ACCIDENTS_DATA,\n    get_position=['lng', 'lat'],\n    auto_highlight=True,\n    elevation_scale=50,\n    pickable=True,\n    elevation_range=[0, 3000],\n    extruded=True,\n    coverage=1)\n\n# Set the viewport location\nview_state = pdk.ViewState(\n    longitude=-1.415,\n    latitude=52.2323,\n    zoom=6,\n    min_zoom=5,\n    max_zoom=15,\n    pitch=40.5,\n    bearing=-27.36)\n\n# Combined all of it and render a viewport\nr = pdk.Deck(layers=[layer], initial_view_state=view_state)\nr.to_html('hexagon-example.html')\n```\n\n\n\n![image](https://i.imgur.com/kPYIKUl.png)\n\nTry changing `type` above to `ScatterplotLayer` and add some\n`ScatterplotLayer` attributes, like `get_fill_color` and `get_radius`:\n\n```\nlayer = pdk.Layer(\n    'ScatterplotLayer',     # Change the `type` positional argument here\n    UK_ACCIDENTS_DATA,\n    get_position=['lng', 'lat'],\n    auto_highlight=True,\n    get_radius=1000,          # Radius is given in meters\n    get_fill_color=[180, 0, 200, 140],  # Set an RGBA value for fill\n    pickable=True)\n```\n\n\n\n![image](https://i.imgur.com/54a7buL.png)\n\n## Expression parsers in pydeck objects\n\nOne particularly powerful feature of pydeck is an in-built Javascript\nexpression parser that can process a limited subset of Javascript–no\nfunctions are allowed, but data accessors, Boolean conditions, inline\nlogical statements, arithmetic operations, and arrays are available.\nThe full details on the deck.gl expression parser are viewable [here](https://github.com/uber/deck.gl/blob/master/docs/api-reference/json/conversion-reference.md).\n\nTo demonstrate the expression parser, change the color input in\n`get_fill_color` to a string:\n\n```\nlayer = pdk.Layer(\n    'ScatterplotLayer',\n    UK_ACCIDENTS_DATA,\n    get_position=['lng', 'lat'],\n    auto_highlight=True,\n    get_radius=1000,\n    get_fill_color='[180, 0, 200, 140]',\n    pickable=True)\n```\n\n\n\n![image](https://i.imgur.com/54a7buL.png)\n\nYou will notice nothing has changed. The\nexpression parser in deck.gl processes the `get_fill_color` argument\nof `'[180, 0, 200, 140]'` and converts it to a list of constants.\n\nImportantly, the expression parser has access to the\nvariables in your data, so you can pass them from Python for use in deck.gl:\n\n```\nlayer = pdk.Layer(\n    'ScatterplotLayer',\n    UK_ACCIDENTS_DATA,\n    get_position=['lng', 'lat'],\n    auto_highlight=True,\n    get_radius=1000,\n    get_fill_color=[255, 'lng > 0 ? 200 * lng : -200 * lng', 'lng', 140],\n    pickable=True)\n```\n\n## Passing string constants\n\nStrings most often in pydeck indicate a data set or deck.gl variable name but\noccasionally indicate a constant. In order to indiciate to the library that you’re passing a string constant,\nyou must quote the string. For example, below\nwe plot the mean of billions of dollars of profit per employee by passing `'\"MEAN\"'` to `aggregation`,\ngiving us the average for that statistic within an area:\n\n```\nDATA_SOURCE = 'https://raw.githubusercontent.com/ajduberstein/geo_datasets/master/fortune_500.csv'\n\nlayer = pydeck.Layer(\n    \"HeatmapLayer\",\n    DATA_SOURCE,\n    opacity=0.9,\n    get_position=[\"longitude\", \"latitude\"],\n    aggregation='\"MEAN\"',\n    get_weight=\"profit / employees > 0 ? profit / employees : 0\")\n```\n\n\n\n![image](https://i.imgur.com/vJIfe71.png)\n\n## Understanding `get_position`\n\nYou may have noticed that `get_position` takes `['lng', 'lat']` in many of these\nexamples. This is deck.gl’s expression parser reading the data passed to\npydeck and extracting longitude and latitude as a coordinate pair.\n\nSuppose you have a CSV as follows, where the location is the first field\nin the CSV (here, `coordinates`)–\n\n```\ncoordinates,classification\n\"[0.0, 0.0]\",A\n\"[0.0, 0.0]\",A\n\"[0.0, 1.0]\",B\n\"[0.0, 1.0]\",C\n```\n\nFor this data, `get_position` here should be specified as `get_position='coordinates'`\n\nIn many data sets, the coordinates are flattened, with X and Y coordinates specified in separate columns:\n\n```\nlng,lat,classification\n0.0,0.0,A\n0.0,0.0,A\n0.0,1.0,B\n0.0,1.0,C\n```\n\nFor the above data, you would specify position as `get_position='[lng,lat]'`\n\nSometimes your data is a list of X/Y pairs. In this case, for convenience,\nthe deck.gl expression parser lets you pass a `'-'` to `get_position`:\n\n```\n[[0, 0], [0, 0], [0, 1.0], [0, 1.0]]\n```\n\nIf your data is shaped as above, `get_position='-'` should correctly parse the input.\n\n## Example: Vancouver property values\n\nBelow, an example combining the expression parser with multiple layers, based on the deck.gl\n[Vancouver property values example](https://deck.gl/#/examples/core-layers/geojson-layer-polygons).\n\n```\nimport pydeck\n\nDATA_URL = \"https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/geojson/vancouver-blocks.json\"\nLAND_COVER = [[[-123.0, 49.196], [-123.0, 49.324], [-123.306, 49.324], [-123.306, 49.196]]]\n\nINITIAL_VIEW_STATE = pydeck.ViewState(\n  latitude=49.254,\n  longitude=-123.13,\n  zoom=11,\n  max_zoom=16,\n  pitch=45,\n  bearing=0\n)\n\npolygon = pydeck.Layer(\n    'PolygonLayer',\n    LAND_COVER,\n    stroked=False,\n    # processes the data as a flat longitude-latitude pair\n    get_polygon='-',\n    get_fill_color=[0, 0, 0, 20]\n)\n\ngeojson = pydeck.Layer(\n    'GeoJsonLayer',\n    DATA_URL,\n    opacity=0.8,\n    stroked=False,\n    filled=True,\n    extruded=True,\n    wireframe=True,\n    get_elevation='properties.valuePerSqm / 20',\n    get_fill_color='[255, 255, properties.growth * 255]',\n    get_line_color=[255, 255, 255],\n    pickable=True\n)\n\nr = pydeck.Deck(\n    layers=[polygon, geojson],\n    initial_view_state=INITIAL_VIEW_STATE)\n\nr.to_html()\n```\n\n\n\n![image](https://i.imgur.com/M3toZK8.png)\n","slug":"docs/generated-markdown/layer","title":"Layer Overview and Examples"},{"excerpt":"LightSettings Light settings are experimental in the pydeck beta. class pydeck.bindings.lightsettings.LightSettings(numberoflights=…","rawMarkdownBody":"# LightSettings\n\nLight settings are experimental in the pydeck beta.\n\n\n### class pydeck.bindings.light_settings.LightSettings(number_of_lights=2, lights_position=None, diffuse_ratio=None, specular_ratio=None, lights_strength=None, ambient_ratio=None)\nBases: `pydeck.bindings.json_tools.JSONMixin`\n\nConfiguration of lights on the plane\n\n\n* **Parameters**\n\n    \n    * **lights_position** (*array**, **default None*) – Location of lights in an array of X/Y/Z coordinates\n\n\n    * **diffuse_ratio** (*float**, **default None*) – Proportion of light at many angles\n\n\n    * **specular_ratio** (*float**, **default None*) – Proportion of light reflected in a mirror-like manner\n\n\n    * **lights_strength** (*array**, **default None*) – Brightness of lights\n\n\n    * **number_of_lights** (*int**, **default None*) – Number of lights in visualization\n","slug":"docs/generated-markdown/light_settings","title":"LightSettings"},{"excerpt":"pydeck High-scale spatial rendering in Python, powered by deck.gl. Get started by installing pydeck. Gallery image image image image image…","rawMarkdownBody":"# pydeck\n\nHigh-scale spatial rendering in Python, powered by [deck.gl](https://deck.gl/#/).\n\nGet started by [installing pydeck](installation.html).\n\n## Gallery\n\n<!-- These image tags are manually added to include these images in the _static directory\nTODO this should be automated in the future. -->\n\n<style>\n.wrapper {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-gap: 20px;\n}\n.grid-cell {\n  margin: 0;\n  min-height: 60px;\n  position: relative;\n\n}\n.thumb-text {\n  z-index: 1;\n  margin-left: 2px;\n  bottom: 0;\n  left: 0;\n  position: absolute;\n  font-weight: 100;\n  color: white;\n  background: charcoal;\n}\n.grid-cell:hover {\n  filter: hue-rotate(3.142rad);\n}\n\n</style>\n\n<div class='wrapper'>\n\n  \n  <div class='grid-cell'>\n      <a href=\"/gallery/arc_layer.html\">\n    <img width=\"200\" src=\"/_images/arc_layer.png\"></img>\n      <div class='thumb-text'>ArcLayer</div></a>\n  </div>\n\n  \n  <div class='grid-cell'>\n      <a href=\"/gallery/bitmap_layer.html\">\n    <img width=\"200\" src=\"/_images/bitmap_layer.png\"></img>\n      <div class='thumb-text'>BitmapLayer</div></a>\n  </div>\n\n  \n  <div class='grid-cell'>\n      <a href=\"/gallery/column_layer.html\">\n    <img width=\"200\" src=\"/_images/column_layer.png\"></img>\n      <div class='thumb-text'>ColumnLayer</div></a>\n  </div>\n\n  \n  <div class='grid-cell'>\n      <a href=\"/gallery/contour_layer.html\">\n    <img width=\"200\" src=\"/_images/contour_layer.png\"></img>\n      <div class='thumb-text'>ContourLayer</div></a>\n  </div>\n\n  \n  <div class='grid-cell'>\n      <a href=\"/gallery/custom_layer.html\">\n    <img width=\"200\" src=\"/_images/custom_layer.png\"></img>\n      <div class='thumb-text'>CustomLayer</div></a>\n  </div>\n\n  \n  <div class='grid-cell'>\n      <a href=\"/gallery/geojson_layer.html\">\n    <img width=\"200\" src=\"/_images/geojson_layer.png\"></img>\n      <div class='thumb-text'>GeoJsonLayer</div></a>\n  </div>\n\n  \n  <div class='grid-cell'>\n      <a href=\"/gallery/great_circle_layer.html\">\n    <img width=\"200\" src=\"/_images/great_circle_layer.png\"></img>\n      <div class='thumb-text'>GreatCircleLayer</div></a>\n  </div>\n\n  \n  <div class='grid-cell'>\n      <a href=\"/gallery/grid_layer.html\">\n    <img width=\"200\" src=\"/_images/grid_layer.png\"></img>\n      <div class='thumb-text'>GridLayer</div></a>\n  </div>\n\n  \n  <div class='grid-cell'>\n      <a href=\"/gallery/h3_cluster_layer.html\">\n    <img width=\"200\" src=\"/_images/h3_cluster_layer.png\"></img>\n      <div class='thumb-text'>H3ClusterLayer</div></a>\n  </div>\n\n  \n  <div class='grid-cell'>\n      <a href=\"/gallery/h3_hexagon_layer.html\">\n    <img width=\"200\" src=\"/_images/h3_hexagon_layer.png\"></img>\n      <div class='thumb-text'>H3HexagonLayer</div></a>\n  </div>\n\n  \n  <div class='grid-cell'>\n      <a href=\"/gallery/heatmap_layer.html\">\n    <img width=\"200\" src=\"/_images/heatmap_layer.png\"></img>\n      <div class='thumb-text'>HeatmapLayer</div></a>\n  </div>\n\n  \n  <div class='grid-cell'>\n      <a href=\"/gallery/hexagon_layer.html\">\n    <img width=\"200\" src=\"/_images/hexagon_layer.png\"></img>\n      <div class='thumb-text'>HexagonLayer</div></a>\n  </div>\n\n  \n  <div class='grid-cell'>\n      <a href=\"/gallery/icon_layer.html\">\n    <img width=\"200\" src=\"/_images/icon_layer.png\"></img>\n      <div class='thumb-text'>IconLayer</div></a>\n  </div>\n\n  \n  <div class='grid-cell'>\n      <a href=\"/gallery/line_layer.html\">\n    <img width=\"200\" src=\"/_images/line_layer.png\"></img>\n      <div class='thumb-text'>LineLayer</div></a>\n  </div>\n\n  \n  <div class='grid-cell'>\n      <a href=\"/gallery/path_layer.html\">\n    <img width=\"200\" src=\"/_images/path_layer.png\"></img>\n      <div class='thumb-text'>PathLayer</div></a>\n  </div>\n\n  \n  <div class='grid-cell'>\n      <a href=\"/gallery/point_cloud_layer.html\">\n    <img width=\"200\" src=\"/_images/point_cloud_layer.png\"></img>\n      <div class='thumb-text'>PointCloudLayer</div></a>\n  </div>\n\n  \n  <div class='grid-cell'>\n      <a href=\"/gallery/polygon_layer.html\">\n    <img width=\"200\" src=\"/_images/polygon_layer.png\"></img>\n      <div class='thumb-text'>PolygonLayer</div></a>\n  </div>\n\n  \n  <div class='grid-cell'>\n      <a href=\"/gallery/s2_layer.html\">\n    <img width=\"200\" src=\"/_images/s2_layer.png\"></img>\n      <div class='thumb-text'>S2Layer</div></a>\n  </div>\n\n  \n  <div class='grid-cell'>\n      <a href=\"/gallery/scatterplot_layer.html\">\n    <img width=\"200\" src=\"/_images/scatterplot_layer.png\"></img>\n      <div class='thumb-text'>ScatterplotLayer</div></a>\n  </div>\n\n  \n  <div class='grid-cell'>\n      <a href=\"/gallery/screengrid_layer.html\">\n    <img width=\"200\" src=\"/_images/screengrid_layer.png\"></img>\n      <div class='thumb-text'>ScreengridLayer</div></a>\n  </div>\n\n  \n  <div class='grid-cell'>\n      <a href=\"/gallery/text_layer.html\">\n    <img width=\"200\" src=\"/_images/text_layer.png\"></img>\n      <div class='thumb-text'>TextLayer</div></a>\n  </div>\n\n  \n  <div class='grid-cell'>\n      <a href=\"/gallery/trips_layer.html\">\n    <img width=\"200\" src=\"/_images/trips_layer.png\"></img>\n      <div class='thumb-text'>TripsLayer</div></a>\n  </div>\n\n</div>\n\n![image](gallery/images/arc_layer.png)\n\n\n\n![image](gallery/images/bitmap_layer.png)\n\n\n\n![image](gallery/images/column_layer.png)\n\n\n\n![image](gallery/images/contour_layer.png)\n\n\n\n![image](gallery/images/custom_layer.png)\n\n\n\n![image](gallery/images/geojson_layer.png)\n\n\n\n![image](gallery/images/great_circle_layer.png)\n\n\n\n![image](gallery/images/grid_layer.png)\n\n\n\n![image](gallery/images/h3_cluster_layer.png)\n\n\n\n![image](gallery/images/h3_hexagon_layer.png)\n\n\n\n![image](gallery/images/heatmap_layer.png)\n\n\n\n![image](gallery/images/hexagon_layer.png)\n\n\n\n![image](gallery/images/icon_layer.png)\n\n\n\n![image](gallery/images/line_layer.png)\n\n\n\n![image](gallery/images/path_layer.png)\n\n\n\n![image](gallery/images/point_cloud_layer.png)\n\n\n\n![image](gallery/images/polygon_layer.png)\n\n\n\n![image](gallery/images/s2_layer.png)\n\n\n\n![image](gallery/images/scatterplot_layer.png)\n\n\n\n![image](gallery/images/screengrid_layer.png)\n\n\n\n![image](gallery/images/text_layer.png)\n\n\n\n![image](gallery/images/trips_layer.png)\n\n## Documentation\n\n## [pydeck in Jupyter](jupyter.html)\n\nUniquely integrated with the Jupyter ecosystem, pydeck supports interactions in a visualization that communicate\nwith the Jupyter kernel. Read more about usage in Jupyter [here](jupyter.html).\n\n## [Layers](layer.html)\n\nConfigure one of the many deck.gl layers for rendering in pydeck.\n\n## [Deck](deck.html)\n\nBetter understand the main object within visualization, used to write data out to a widget in Jupyter,\nsave it out to HTML, and configure some global parameters of a visualization, like its size or\ntooltip.\n\n## [Data utilities](data_utils.html)\n\nA handful of functions to make certain common data exercises easier,\nlike automatically fitting a viewport to data on a map or quickly coloring categorical data\n\n## [ViewState](view_state.html)\n\nUsed to set the precise location of a user’s vantage point on the data, like\na user’s zoom level\n\n## [View](view.html)\n\nUsed to enable or disable map controls and also modify the kind of map projection,\nlike plotting in flat plane instead of plotting on a mercator projection\n\n## [LightSettings (Experimental)](light_settings.html)\n\nConfigure the lighting within a visualization.\n\n**NOTE**: The pydeck library assumes Internet access. You will need an Internet connection or the visualization will not render.\n\nCurrently, pydeck will **not** raise an error on incorrect or omitted Layer arguments.\nIf nothing renders in your viewport, check your browser’s [developer console](https://javascript.info/devtools)\nor review the layer catalog. You are encouraged to file an issue by clicking [here](https://github.com/uber/deck.gl/issues/new?assignees=&labels=bug&template=bug-report.md&title=)\nand mention `pydeck` in the title.\n","slug":"docs/generated-markdown/index","title":"pydeck"},{"excerpt":"Installing pydeck There are three steps before using pydeck: Install the library via pip or conda Get a Mapbox API token Enable pydeck for…","rawMarkdownBody":"# Installing pydeck\n\nThere are three steps before using pydeck:\n\n> \n> 1. Install the library via pip or conda\n\n\n> 2. Get a Mapbox API token\n\n\n> 3. Enable pydeck for Jupyter Lab or Jupyter Notebook\n\n## Via pip\n\nNote: It is best practice to run this command in a [virtual environment](https://docs.python.org/3/library/venv.html#creating-virtual-environments).\n\n```\npip install pydeck\n```\n\n## Via conda\n\n```\nconda install -c conda-forge pydeck\n```\n\n## Getting a Mapbox API key\n\nTo add basemap tiles, you must get a Mapbox API key, which you can do by\nregistering for Mapbox via [this link](https://account.mapbox.com/auth/signup/).\nYou should then create a [new public API token](https://account.mapbox.com/access-tokens/).\n\nMapbox tiles are free for a rather high level of usage. You can learn more about\nMapbox tokens via their [documentation](https://docs.mapbox.com/help/how-mapbox-works/access-tokens/#how-access-tokens-work).\n\nIf you set a `MAPBOX_API_KEY` environment variable, pydeck will detect it. This way, you do not\nneed to specify the Mapbox token in your source code.\n\n## Enabling pydeck for Jupyter\n\nJupyter allows for more complex server/client interactions. You or your system administrator\nmust enable pydeck for use in Jupyter. Binary data transportation, data selection, and updating data over time\ninteractively only work if pydeck is enabled for use in a Jupyter environments.\n\nTo enable pydeck for Jupyter Notebook:\n\n```\njupyter nbextension install --sys-prefix --symlink --overwrite --py pydeck\njupyter nbextension enable --sys-prefix --py pydeck\n```\n\nTo enable pydeck for Jupyter Lab:\n\n```\njupyter labextension install @jupyter-widgets/jupyterlab-manager\nDECKGL_SEMVER=`python -c \"import pydeck; print(pydeck.frontend_semver.DECKGL_SEMVER)\"`\njupyter labextension install @deck.gl/jupyter-widget@$DECKGL_SEMVER\n```\n\nCurrently while you can install pydeck in Google Collab via pip, it is not enabled for server use there.\n\n## Installing from source\n\nIf you want to install the library from its source:\n\n```\ngit clone https://github.com/uber/deck.gl\ncd deck.gl/bindings/pydeck\nmake pre-init\n. env/bin/activate\nmake init\nmake prepare-jupyter\n```\n\nYou can run the local tests to verify that the installation worked via `make test`.\n\n## Development notes\n\nPlease note that if you are installing a pydeck prerelease, you may have to specify a specific version\nof `@deck.gl/jupyter-widget` to install for JupyterLab. You can read this version from pydeck itself.\n\n```\nDECKGL_SEMVER=`python -c \"import pydeck; print(pydeck.frontend_semver.DECKGL_SEMVER)\"`\njupyter labextension install @deck.gl/jupyter-widget@$DECKGL_SEMVER\n```\n","slug":"docs/generated-markdown/installation","title":"Installing pydeck"},{"excerpt":"Configuring tooltips While you can get a tooltip in pydeck by simply setting  in the\n constructor, you may want a more customizable one than…","rawMarkdownBody":"# Configuring tooltips\n\nWhile you can get a tooltip in pydeck by simply setting `Deck(tooltip=True)` in the\n`pydeck.bindings.deck.Deck` constructor, you may want a more customizable one than the default.\n\nTo achieve this, `pydeck.bindings.deck.Deck` `tooltip` parameter can take a dictionary with the following keys:\n\n\n* `html` - Set the [innerHTML](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML) of the tooltip.\n\n\n* `text` - Set the [innerText](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText) of the tooltip.\n\n\n* `style` - A dictionary of CSS styles that will modify the default style of the tooltip.\n\nNote that you should only provide either `html` or `text`, but not both.\n\n## Templating syntax\n\nA lightweight template syntax is available to both the `text` and `html` keys,\nusing similar conventions as Python’s `.format` syntax with variable names.\n\n```\ntooltip = {\n   \"html\": \"<b>Elevation Value:</b> {elevationValue} <br/> <b>Color Value:</b> {colorValue}\",\n   \"style\": {\n        \"backgroundColor\": \"steelblue\",\n        \"color\": \"white\"\n   }\n}\n```\n\nVariable names available to the template are top level primitives in an individual\nrow of data given by deck.gl’s [pickingInfo.object](https://github.com/uber/deck.gl/blob/master/docs/developer-guide/interactivity.md#the-picking-info-object) and vary by layer.\nFor example, in an aggregation layer like `HexagonLayer`, the\ntop-level attributes for an individual picked datum include `elevationValue`,\n`colorValue` and a list of `points` under the cursor.\n\n`elevationValue` and `colorValue` would be available to the template engine,\nwhereas individual points in the `points` array would not.\n\n## Examples\n\nSetting the tooltip’s HTML value and CSS:\n\n```\ntooltip = {\n   \"html\": \"<b>Elevation Value:</b> {elevationValue}\",\n   \"style\": {\n        \"backgroundColor\": \"steelblue\",\n        \"color\": \"white\"\n   }\n}\n```\n\n\n\n![image](https://i.imgur.com/5tcpgYN.png)\n\nJust setting the text:\n\n```\ntooltip = {\n    \"text\": \"Elevation: {elevationValue}\"\n}\n```\n\n\n\n![image](https://i.imgur.com/FSkiBVW.png)\n\nA full demo is below:\n\n```\nimport pydeck as pdk\n\nlayer = pdk.Layer(\n    'HexagonLayer',\n    UK_ACCIDENTS_DATA,\n    get_position='[lng, lat]',\n    auto_highlight=True,\n    elevation_scale=50,\n    pickable=True,\n    elevation_range=[0, 3000],\n    extruded=True,\n    coverage=1)\n\n# Set the viewport location\nview_state = pdk.ViewState(\n    longitude=-1.415,\n    latitude=52.2323,\n    zoom=6,\n    min_zoom=5,\n    max_zoom=15,\n    pitch=40.5,\n    bearing=-27.36)\n\n# Combined all of it and render a viewport\nr = pdk.Deck(\n    layers=[layer],\n    initial_view_state=view_state,\n    tooltip={\n        'html': '<b>Elevation Value:</b> {elevationValue}',\n        'style': {\n            'color': 'white'\n        }\n    }\n)\nr.to_html()\n```\n","slug":"docs/generated-markdown/tooltip","title":"Configuring tooltips"},{"excerpt":"View class pydeck.bindings.view.View(type=None, controller=None) Bases:  Represents a “hard configuration” of a camera location Parameters…","rawMarkdownBody":"# View\n\n\n### class pydeck.bindings.view.View(type=None, controller=None)\nBases: `pydeck.bindings.json_tools.JSONMixin`\n\nRepresents a “hard configuration” of a camera location\n\n\n* **Parameters**\n\n    \n    * **type** (*str**, **default None*) – deck.gl view to display, e.g., MapView\n\n\n    * **controller** (*bool**, **default None*) – If enabled, camera becomes interactive.\n\n\n\n#### property type()\n","slug":"docs/generated-markdown/view","title":"View"},{"excerpt":"ViewState class pydeck.bindings.viewstate.ViewState(longitude=None, latitude=None, zoom=None, minzoom=None, max_zoom=None, pitch=None…","rawMarkdownBody":"# ViewState\n\n\n### class pydeck.bindings.view_state.ViewState(longitude=None, latitude=None, zoom=None, min_zoom=None, max_zoom=None, pitch=None, bearing=None, \\*\\*kwargs)\nAn object that represents where the state of a viewport, essentially where the screen is focused.\n\nIf you have two dimensional data and you don’t want to set this manually,\nsee `pydeck.data_utils.viewport_helpers.compute_view()`.\n\n\n* **Parameters**\n\n    \n    * **longitude** (*float**, **default None*) – x-coordinate of focus\n\n\n    * **latitude** (*float**, **default None*) – y-coordinate of focus\n\n\n    * **zoom** (*float**, **default None*) – Magnification level of the map, usually between 0 (representing the whole world)\n    and 24 (close to individual buildings)\n\n\n    * **min_zoom** (*float**, **default None*) – Least mangified zoom level the user can navigate to\n\n\n    * **max_zoom** (*float**, **default None*) – Most magnified zoom level the user can navigate to\n\n\n    * **pitch** (*float**, **default None*) – Up/down angle relative to the map’s plane, with 0 being looking directly at the map\n\n\n    * **bearing** (*float**, **default None*) – Left/right angle relative to the map’s true north, with 0 being aligned to true north\n","slug":"docs/generated-markdown/view_state","title":"ViewState"},{"excerpt":"Jupyter-specific features Jupyter environments offer unique opportunities for two-way data interaction,\nsharing data between the Python…","rawMarkdownBody":"# Jupyter-specific features\n\nJupyter environments offer unique opportunities for two-way data interaction,\nsharing data between the Python backend and visualization in deck.gl.\n\nTo use a visualization with these features, call `pydeck.bindings.deck.Deck.show()` on the `pydeck.bindings.deck.Deck` object\nrather than `pydeck.bindings.deck.Deck.to_html()`.\n\n\n* *Data updates.* By calling `pydeck.bindings.deck.Deck.update()` on a `pydeck.bindings.deck.Deck` object with a new visualization configuration, you can seamless push new data into a pre-existing visualization.\n\n\n* *Binary data transfer.* For certain data sets pydeck can support many millions of points by using Jupyter’s socket-level communication. Further documentation is [here](binary_transfer.html).\n\n\n* *Data selection.* Data can be selected within a pydeck visualization and pushed back to the client. Holding Command while clicking allows the user to select multiple points.\n\nInteractive examples for these features are available on mybinder.org. Click the Binder logo below:\n","slug":"docs/generated-markdown/jupyter","title":"Jupyter-specific features"}]}}}